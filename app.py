# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nQlUXOXI1PBaOBgsUuWPdR-IGb9XXLit
"""

import streamlit as st
import numpy as np
import pickle

# Load trained model
model = pickle.load(open('food_demand_model.pkl', 'rb'))

st.set_page_config(page_title="Restaurant Demand Predictor", page_icon="üçΩÔ∏è")
st.title("üçΩÔ∏è Restaurant Food Order Forecasting")

# Label encodings (update if needed based on your model)
category_mapping = {
    'Beverages': 0,
    'Extras': 1,
    'Rice Bowl': 2,
    'Sandwich': 3,
    'Starters': 4
}

cuisine_mapping = {
    'Italian': 0,
    'Indian': 1,
    'Thai': 2,
    'Continental': 3
}

center_type_mapping = {
    'TYPE_A': 0,
    'TYPE_B': 1,
    'TYPE_C': 2
}

# Input fields
week = st.number_input("Week (1‚Äì145)", min_value=1, max_value=145)
center_id = st.number_input("Center ID", min_value=1)
meal_id = st.number_input("Meal ID", min_value=1)
checkout_price = st.number_input("Checkout Price", format="%.2f")
base_price = st.number_input("Base Price", format="%.2f")
emailer_for_promotion = st.selectbox("Emailer for Promotion", [0, 1])
homepage_featured = st.selectbox("Homepage Featured", [0, 1])

# Dropdowns with human-readable names
category_label = st.selectbox("Category", list(category_mapping.keys()))
category = category_mapping[category_label]

cuisine_label = st.selectbox("Cuisine", list(cuisine_mapping.keys()))
cuisine = cuisine_mapping[cuisine_label]

city_code = st.number_input("City Code", min_value=1)
region_code = st.number_input("Region Code", min_value=1)

center_type_label = st.selectbox("Center Type", list(center_type_mapping.keys()))
center_type = center_type_mapping[center_type_label]

op_area = st.number_input("Operating Area", format="%.2f")

# Predict button
if st.button("Predict Demand"):
    features = np.array([[week, center_id, meal_id, checkout_price, base_price,
                          emailer_for_promotion, homepage_featured, category, cuisine,
                          city_code, region_code, center_type, op_area]])

    prediction = model.predict(features)[0]
    st.success(f"üì¶ Predicted Number of Orders: {int(prediction)}")